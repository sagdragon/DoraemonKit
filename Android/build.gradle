// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    apply from: "config.gradle"
    def runType = rootProject.ext.publish_config["run_type"]
    def dokitPluginVersion = rootProject.ext.publish_config["version"]
    def kotlinVersion = rootProject.ext.android["kotlin_version"]
    def gradlePluginVersion = rootProject.ext.android["agp_module_verson"]


    repositories {
        google()
        mavenCentral()
        jcenter()
        maven {
            url "https://oss.sonatype.org/content/groups/public"
        }
//        maven { url 'https://artifactory.intra.xiaojukeji.com/artifactory/public' }
//        maven {
//            //本地插件地址
//            url uri('/Users/didi/project/dokit_repo')
//        }
    }
    dependencies {
        classpath "com.android.tools.build:gradle:$gradlePluginVersion"

        // MavenCentral
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:1.4.30"
        if (runType == 1) {
            classpath "io.github.didi.dokit:dokitx-plugin:$dokitPluginVersion"
        }
        //classpath "com.didiglobal.booster:booster-task-compression-pngquant:${rootProject.ext.android["booster_version"]}"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
//        classpath "com.didiglobal.booster:booster-gradle-plugin:3.3.1"
//        classpath "com.didiglobal.booster:booster-task-analyser:3.3.1"
    }

}

allprojects {
    repositories {
        google()
        mavenCentral()
        jcenter()
        maven {
            url "https://oss.sonatype.org/content/groups/public"
        }
//        maven { url 'https://artifactory.intra.xiaojukeji.com/artifactory/public' }
//        maven {
//            //本地插件地址
//            url uri('/Users/didi/project/dokit_repo')
//        }
    }
}

task clean(type: Delete) {
    doLast {
        delete rootProject.buildDir
    }
}

/**
 * 删除指定目录下的文件
 */
task deleteSource(type: Delete) {
    doFirst {
        println("path===>${project.rootDir}")
        println("===delete Plugin Source start===")
    }
    followSymlinks = true
    delete "${project.rootDir}/dokit-plugin/src/main/kotlin"
    doLast {
        println("===delete Plugin Source end===")
    }
}

/**
 * 将buildSrc中的代码同步到doraemonkit-plugin中
 */
task copyPluginSource(type: Copy, dependsOn: deleteSource) {
    doFirst {
        println("===copy Plugin Source start===")
    }

    from "${project.rootDir}/buildSrc/src/main/kotlin"
    into "${project.rootDir}/dokit-plugin/src/main/kotlin"
    include('**/*')

    doLast {
        println("===copy Plugin Source end===")
    }
}

/**
 * 打包上传配置检查
 */
task checkUploadConfig4Maven() {
    doLast {
        if (rootProject.ext.publish_config["archives_type"] != 2) {
            throw new RuntimeException("执行当前打包上传任务必须修改config.gradle配置中的archives_type = 2。")
        }
        try {
            rootProject.project("dokit-rpc").name
            rootProject.project("dokit-rpc-mc").name

        } catch (Exception e) {
            throw new RuntimeException("dokit rpc 相关模块未开启动。。。")
        }

        try {
            rootProject.project("dokit-plugin").name
        } catch (Exception e) {
            throw new RuntimeException("dokit plugn 模块未开启动。。。")
        }

    }
}

task checkUploadConfig4Local() {
    doLast {
        if (rootProject.ext.publish_config["archives_type"] != 0) {
            throw new RuntimeException("执行当前打包上传任务必须修改config.gradle配置中的archives_type = 0。")
        }
        try {
            rootProject.project("dokit-rpc").name
            rootProject.project("dokit-rpc-mc").name
        } catch (Exception e) {
            throw new RuntimeException("dokit rpc 相关模块未开启动。。。")
        }

        try {
            rootProject.project("dokit-plugin").name
        } catch (Exception e) {
            throw new RuntimeException("dokit plugn 模块未开启动。。。")
        }

    }
}

task checkUploadConfig4Didi() {
    doLast {
        if (rootProject.ext.publish_config["archives_type"] != 1) {
            throw new RuntimeException("执行当前打包上传任务必须修改config.gradle配置中的archives_type = 1。")
        }
        try {
            rootProject.project("dokit-rpc").name
            rootProject.project("dokit-rpc-mc").name
        } catch (Exception e) {
            throw new RuntimeException("dokit rpc 相关模块未开启动。。。")
        }

        try {
            rootProject.project("dokit-plugin").name
        } catch (Exception e) {
            throw new RuntimeException("dokit plugn 模块未开启动。。。")
        }

    }
}

